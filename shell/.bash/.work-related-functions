#!/bin/bash
alias grey-grep="GREP_COLORS='1;30'    grep --color=always --line-buffered"
alias red-grep="GREP_COLORS='1;31'     grep --color=always --line-buffered"
alias green-grep="GREP_COLORS='1;32'   grep --color=always --line-buffered"
alias yellow-grep="GREP_COLORS='1;33'  grep --color=always --line-buffered"
alias blue-grep="GREP_COLORS='1;34'    grep --color=always --line-buffered"
alias magenta-grep="GREP_COLORS='1;35' grep --color=always --line-buffered"
alias cyan-grep="GREP_COLORS='1;36'    grep --color=always --line-buffered"

alias less="less -R"

Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[1;36m'         # Cyan
White='\033[0;37m'        # White
NC='\033[0m' # No Color



mvnc=' grep --line-buffered --color=always "cd ~.*\|===.*\|Downloading\|\[INFO] Building\|\[ERROR].*\|\[WARN].*\| SUCCESS \[.*\| FAILURE \[.*\| SKIPPED\|\[WARNING]\|Building.*" | red-grep  "^\|\[ERROR]\|\[WARN]" | green-grep "^\|SUCCESS" | cyan-grep "^\|SKIPPED" | green-grep "^\|\[INFO]" | blue-grep "^\|Building.*" | grey-grep "^\|Installing\|Downloading" | red-grep "^\|cd ~.*" | blue-grep "^\|===.*" '

hops-build-verbose (){
#	set -e  # strange maven kill bash when there is a build failure
    base_folder="~/code/hops"
	pushd . &> /dev/null && \
	start=`date +%s` && \
	# display_colored_msg "Building Hops-gpu-management" && \
    # exe_and_display "cd $base_folder/hops-gpu-management && mvn  $@ install -DskipTests " && \

	# display_colored_msg "Building Hops-gpu-management-impl-nvidia" && \
    # exe_and_display "cd $base_folder//hops-gpu-management-impl-nvidia && mvn  $@ install -DskipTests " && \

	# display_colored_msg "Building Hops-gpu-management-impl-amd" && \
	# exe_and_display "cd $base_folder/hops-gpu-management-impl-amd && mvn  $@ install -DskipTests " && \

	display_colored_msg "Building Hops-metadata-dal" && \
	exe_and_display "cd $base_folder/hops-metadata-dal && mvn  clean install -DskipTests " && \

	display_colored_msg "Building Hops-metadata-dal-impl-ndb" && \
	exe_and_display "cd $base_folder/hops-metadata-dal-impl-ndb && mvn  clean install -DskipTests " && \

	display_colored_msg "Building Hops" && \

	export PATH=~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/:$PATH && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/.libs && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/code/hops/rondb-docker/ && \

	exe_and_display "cd $base_folder/hops && mvn $@ generate-sources install -DskipTests -Dmaven.javadoc.skip=true" && \

	display_colored_msg "Building Hops Tests" && \
	exe_and_display "cd $base_folder/hops && mvn test-compile " && \

	popd &> /dev/null  && \
	end=`date +%s` && \
	runtime=$((end-start)) && \
	display_colored_msg "[INFO] Building Hops Took: $runtime sec(s)"
}



hops-build (){
	eval "hops-build-verbose $@| $mvnc"
}

hops-build-quick (){
	eval "hops-build-verbose $@ -DskipShade -Danimal.sniffer.skip | $mvnc"
}


hops-build-distro (){
	pushd . &> /dev/null && \
    base_folder="~/code/hops"

	display_colored_msg "Building Hops-metadata-dal" && \
	exe_and_display "cd $base_folder/hops-metadata-dal && mvn install -DskipTests " && \

	display_colored_msg "Building Hops-metadata-dal-impl-ndb" && \
	exe_and_display "cd $base_folder/hops-metadata-dal-impl-ndb && mvn clean assembly:assembly -DskipTests " && \

	display_colored_msg "Building Distribution" && \
    exe_and_display "cd $base_folder/hops && mvn clean" && \

	display_colored_msg "Building Distribution" && \
    #exe_and_display "cd $base_folder/hops && mvn generate-sources package -Pdist,native -Dtar -DskipTests -Dmaven.javadoc.skip=true -nsu" && \

	  export PATH=~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/:$PATH && \
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/.libs && \
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/code/hops/rondb-docker/ && \

    exe_and_display "cd $base_folder/hops && mvn generate-sources package -Pdist -Dtar -DskipTests -Dmaven.javadoc.skip=true -nsu" && \
	popd &> /dev/null
}

hops-unit-test (){
	pushd . &> /dev/null && \
	base_folder="~/code/hops"
	display_colored_msg "Unit Testing $1" && \
	exe_and_display "cd $base_folder/hops && mvn -Pndb surefire:test -Dtest=$1 -DfailIfNoTests=false" && \
	popd &> /dev/null
}


mi () {
 	exe_and_display "mvn $@ install -Dmaven.test.skip=true "
}

mig () {
	pushd . &> /dev/null && \
    base_folder="~/code/hops"
  export PATH=~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/:$PATH && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/.libs && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/code/hops/rondb-docker/ && \
    exe_and_display "cd $base_folder/hops && mvn generate-sources package -Pdist -Dtar -DskipTests -Dmaven.javadoc.skip=true -nsu" && \
	popd &> /dev/null
}

mg () {
	pushd . &> /dev/null && \
    base_folder="~/code/hops"
  export PATH=~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/:$PATH && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/.libs && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/code/hops/rondb-docker/ && \
    exe_and_display "cd $base_folder/hops && mvn generate-sources -DskipTests" && \
	popd &> /dev/null
}

hops-unit-test (){
	pushd . &> /dev/null && \
	base_folder="~/code/hops"
	display_colored_msg "Unit Testing $1" && \
	exe_and_display "cd $base_folder/hops && mvn -Pndb surefire:test -Dtest=$1 -DfailIfNoTests=false" && \
	popd &> /dev/null
}


mi () {
 	exe_and_display "mvn $@ install -Dmaven.test.skip=true "
}

mig () {
  export PATH=~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/:$PATH && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/.libs && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/bin/
	exe_and_display "mvn $@ install generate-sources install -Pdist -Dtar -DskipTests -Dmaven.javadoc.skip=true"
}


mtc () {
	export PATH=~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/:$PATH && \
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/bin/protocol_buffer_all_versions/protobuf-2.5.0/src/.libs && \
   exe_and_display "mvn test-compile "
}

s2 () {
#ssh -A -t nzo@cloud1.sics.se ssh -A -t salman@salman2.sics.se
	ssh salman@salman2.sics.se
}

ice () {
	ssh -p 8209 hdp@ice $@
}

ice-test () {
    ssh -p 8209 hdp@ice -t ssh tester@10.0.208.1
}

c1 () { 
	ssh nzo@cloud1.sics.se
}

#if [ -n "$DISPLAY" ]; then
#   Xaxis=$(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f1)
#   if [ "$Xaxis" -gt "2000" ]; then
#   	   alias mupdf="mupdf -r 400"
#   fi
#fi

tmux-pane-color(){
  	tmux select-pane -t:.$1 -P "fg=$2,bg=$3"
  	if [ "$?" -ne "0" ]; then
  		echo "Usage command {pane-number} {fg-color} {bg-color} "
  	fi
}

ndb-start-vm(){
    pushd .; cd /tmp
    VBoxManage startvm centos --type headless
    echo "Starting VM ..."
    sleep 15
    echo "Starting Starting NDB ..."
    ssh -p 2222 salman@localhost ./start-cluster
    popd
}

ndb-stop-vm(){
    VBoxManage controlvm centos acpipowerbutton
}

ndb-ssh-vm(){
    ssh -p 2222 salman@localhost
}

ndb-mysql(){
   ssh -p 2222 -t salman@localhost "/home/salman/.mysql/ndb/scripts/mysql $@"
}

ndb-mycli(){
   ssh -p 2222 -t salman@localhost "/home/salman/.mysql/ndb/scripts/mycli $@"
}

b() {
  ~/.local/bin/build-rondb
}
