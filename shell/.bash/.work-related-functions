#!/bin/bash
alias grey-grep="GREP_COLORS='1;30'    grep --color=always --line-buffered"
alias red-grep="GREP_COLORS='1;31'     grep --color=always --line-buffered"
alias green-grep="GREP_COLORS='1;32'   grep --color=always --line-buffered"
alias yellow-grep="GREP_COLORS='1;33'  grep --color=always --line-buffered"
alias blue-grep="GREP_COLORS='1;34'    grep --color=always --line-buffered"
alias magenta-grep="GREP_COLORS='1;35' grep --color=always --line-buffered"
alias cyan-grep="GREP_COLORS='1;36'    grep --color=always --line-buffered"

alias less="less -R"

Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[1;36m'         # Cyan
White='\033[0;37m'        # White
NC='\033[0m' # No Color



mvnc=' grep --line-buffered --color=always "cd ~.*\|===.*\|Downloading\|\[INFO] Building\|\[ERROR].*\|\[WARN].*\| SUCCESS \[.*\| FAILURE \[.*\| SKIPPED\|\[WARNING]\|Building.*" | red-grep  "^\|\[ERROR]\|\[WARN]" | green-grep "^\|SUCCESS" | cyan-grep "^\|SKIPPED" | green-grep "^\|\[INFO]" | blue-grep "^\|Building.*" | grey-grep "^\|Installing\|Downloading" | red-grep "^\|cd ~.*" | blue-grep "^\|===.*" '

hops-build (){
  local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
#	set -e  # strange maven kill bash when there is a build failure
    base_folder="~/code/hops"
	pushd . &> /dev/null && \
	start=`date +%s` && \

	display_colored_msg "Building Hops-metadata-dal" && \
	exe_and_display "cd $base_folder/hops-metadata-dal && mvn  clean install -DskipTests " && \

	display_colored_msg "Building Hops-metadata-dal-impl-ndb" && \
	exe_and_display "cd $base_folder/hops-metadata-dal-impl-ndb && mvn  clean install -DskipTests " && \

	display_colored_msg "Building Hops" && \

	local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" && \
  local LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/code/hops/rondb-docker/ && \

	exe_and_display "cd $base_folder/hops && mvn $@ generate-sources install -DskipTests -DskipShade -Dmaven.javadoc.skip=true" && \

	display_colored_msg "Building Hops Tests" && \
	exe_and_display "cd $base_folder/hops && mvn test-compile " && \

	popd &> /dev/null  && \
	end=`date +%s` && \
	runtime=$((end-start)) && \
	display_colored_msg "[INFO] Building Hops Took: $runtime sec(s)"
}

build-build-apache-hadoop (){
  local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
 	local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" 
	mvn clean install generate-sources -DskipTests
}

hops-build-quick (){
	eval "hops-build $@ -DskipShade -Danimal.sniffer.skip"
}

hops-build-distro (){
  local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
	pushd . &> /dev/null && \
    base_folder="~/code/hops"

	display_colored_msg "Building Hops-metadata-dal" && \
	exe_and_display "cd $base_folder/hops-metadata-dal && mvn install -DskipTests " && \

	display_colored_msg "Building Hops-metadata-dal-impl-ndb" && \
	exe_and_display "cd $base_folder/hops-metadata-dal-impl-ndb && mvn clean assembly:assembly -DskipTests " && \

	display_colored_msg "Building Distribution" && \
    exe_and_display "cd $base_folder/hops && mvn clean" && \

	display_colored_msg "Building Distribution" && \
    #exe_and_display "cd $base_folder/hops && mvn generate-sources package -Pdist,native -Dtar -DskipTests -Dmaven.javadoc.skip=true -nsu" && \

	  local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" && \
    local LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/code/hops/rondb-docker/ && \

    exe_and_display "cd $base_folder/hops && mvn install generate-sources package -Pdist -Dtar -DskipTests -Dmaven.javadoc.skip=true -nsu" && \
	popd &> /dev/null
}

hops-unit-test (){
	pushd . &> /dev/null && \
	base_folder="~/code/hops"
	display_colored_msg "Unit Testing $1" && \
	exe_and_display "cd $base_folder/hops && mvn -Pndb surefire:test -Dtest=$1 -DfailIfNoTests=false" && \
	popd &> /dev/null
}


mi () {
 	exe_and_display "mvn $@ install -Dmaven.test.skip=true "
}

mig () {
  local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
	pushd . &> /dev/null && \
   base_folder="~/code/hops"
  local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" && \
  local LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/code/hops/rondb-docker/ && \
    exe_and_display "cd $base_folder/hops && mvn generate-sources package -Pdist -Dtar -DskipTests -Dmaven.javadoc.skip=true -nsu" && \
	popd &> /dev/null
}

mg () {
  local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
	pushd . &> /dev/null && \
  base_folder="~/code/hops"
  local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" && \
  local LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/code/hops/rondb-docker/ && \
    exe_and_display "cd $base_folder/hops && mvn generate-sources -DskipTests" && \
	popd &> /dev/null
}

hops-unit-test (){
	pushd . &> /dev/null && \
	base_folder="~/code/hops"
	display_colored_msg "Unit Testing $1" && \
	exe_and_display "cd $base_folder/hops && mvn -Pndb surefire:test -Dtest=$1 -DfailIfNoTests=false" && \
	popd &> /dev/null
}


mi () {
 	exe_and_display "mvn $@ install -Dmaven.test.skip=true "
}

mig () {
  local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
  local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" && \
  local LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/usr/bin/
	exe_and_display "mvn $@ install generate-sources install -Pdist -Dtar -DskipTests -Dmaven.javadoc.skip=true"
}


mtc () {
   local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
   local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" && \
   exe_and_display "mvn test-compile "
}

mt () {
   local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
   local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" && \
   if [ -z "$1" ]; then
     echo "No argument supplied"
   fi
   exe_and_display "mvn test -Pndb -Dtest=$1 -Dsurefire.failIfNoSpecifiedTests=false"
}

m () {
   local JAVA_HOME="${HOME}/usr/bin/jdk_for_hadoop"
   local PATH="${HOME}/usr/bin/protocol_buffer_all_versions/protoc_for_hadoop/src:$PATH" && \
   exe_and_display "mvn $@" 
}


tmux-pane-color(){
  	tmux select-pane -t:.$1 -P "fg=$2,bg=$3"
  	if [ "$?" -ne "0" ]; then
  		echo "Usage command {pane-number} {fg-color} {bg-color} "
  	fi
}

b() {
  ~/.local/bin/build-rondb
}

# notify about status of last command 
n() {
  local last_status=$?   
  local message

  if (( $# > 0 )); then
    message="$*"
    icon="informational"
  else
    local last_command
    last_command="$(fc -ln -1 | sed -n '1p')"

    local status_text
    if (( last_status == 0 )); then
      status_text="✅ Passed. Exit Code: ${last_status}"
      icon="informational"
    else
      status_text="❌ Failed. Exit Code: ${last_status}"
      icon="critical"
    fi

    message="${last_command}"
  fi

  local msg_escaped=${message//\"/\\\"}

  #OSC
  if [ -n "$TMUX" ]; then
    printf $'\033Ptmux;\033\033]99;i=1:d=0;'"$msg_escaped"$'\033\033\\\033\\'
    printf $'\033Ptmux;\033\033]99;i=1:p=body;'"$status_text"$'\033\033\\\033\\'
  else
    printf "\x1b]99;i=1:d=0;${msg_escaped}\x1b\\";
    printf "\x1b]99;i=1:p=body;${status_text}\x1b\\"
  fi
  #afplay /System/Library/Sounds/Glass.aiff & 
  #osascript -e "display alert \"Notification\" message \"$msg_escaped\" as $icon"
}
