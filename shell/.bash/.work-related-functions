#!/bin/bash
alias grey-grep="GREP_COLOR='1;30'    grep --color=always --line-buffered"
alias red-grep="GREP_COLOR='1;31'     grep --color=always --line-buffered"
alias green-grep="GREP_COLOR='1;32'   grep --color=always --line-buffered"
alias yellow-grep="GREP_COLOR='1;33'  grep --color=always --line-buffered"
alias blue-grep="GREP_COLOR='1;34'    grep --color=always --line-buffered"
alias magenta-grep="GREP_COLOR='1;35' grep --color=always --line-buffered"
alias cyan-grep="GREP_COLOR='1;36'    grep --color=always --line-buffered"

alias less="less -R"

Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[1;36m'         # Cyan
White='\033[0;37m'        # White
NC='\033[0m' # No Color

display_colored_msg() {
    printf "\n${Cyan}$@${NC}\n"
    linelen=$(expr length "$@")
    line=""
    for i in $(seq 1 $linelen); do
        line="$line="
    done
    printf "${Cyan}$line${NC}\n"
}

exe_and_display() {
    printf "${Green}$@${NC}\n"
    eval "$@"
}

hops-push() {
	pushd . &> /dev/null 
	display_colored_msg "Hops" && \
	exe_and_display "cd ~/code/hops/hops && git push $@"  && \

	display_colored_msg "Hops-Metadata-Dal" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal && git push $@" && \

	display_colored_msg "Hops-Metadata-Dal-Impl-NDB" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git push $@" 
	popd &> /dev/null 
}

hops-pull (){
	pushd . &> /dev/null 

	display_colored_msg "Hops" && \
	exe_and_display "cd ~/code/hops/hops && git pull $@"  && \

	display_colored_msg "Hops-Metadata-Dal" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal && git pull $@" && \

	display_colored_msg "Hops-Metadata-Dal-Impl-NDB" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git pull $@" && \

	display_colored_msg "Hops-Gpu-Mgm" && \
	exe_and_display "cd ~/code/hops/hops-gpu-management && git pull $@" && \

	display_colored_msg "Hops-Gpu-Mgm-Impl-Nvidia" && \
	exe_and_display "cd ~/code/hops/hops-gpu-management-impl-nvidia && git pull $@" && \

	display_colored_msg "Hops-Gpu-Mgm-Impl-AMD" && \
	exe_and_display "cd ~/code/hops/hops-gpu-management-impl-amd && git pull $@" 

	popd &> /dev/null 
}

hops-fetch (){
	pushd . &> /dev/null 
	display_colored_msg "Hops" && \
	exe_and_display "cd ~/code/hops/hops && git fetch $@"  && \

	display_colored_msg "Hops-Metadata-Dal" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal && git fetch $@" && \

	display_colored_msg "Hops-Metadata-Dal-Impl-NDB" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git fetch $@" && \

	display_colored_msg "Hops-Gpu-Mgm" && \
	exe_and_display "cd ~/code/hops/hops-gpu-management && git fetch $@" && \

	display_colored_msg "Hops-Gpu-Mgm-Impl-Nvidia" && \
	exe_and_display "cd ~/code/hops/hops-gpu-management-impl-nvidia && git fetch $@" && \

	display_colored_msg "Hops-Gpu-Mgm-Impl-AMD" && \
	exe_and_display "cd ~/code/hops/hops-gpu-management-impl-amd && git fetch $@"

	popd &> /dev/null 
}

hops-checkout-branch (){
	if [ ! "$#" -eq 1 ]; then
	    echo "Please enter new branch name"
	    return 1
    fi

	pushd . &> /dev/null 
	display_colored_msg "Hops" && \
	exe_and_display "cd ~/code/hops/hops && git checkout $1"  && \

	display_colored_msg "Hops-Metadata-Dal" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal && git checkout $1" && \

	display_colored_msg "Hops-Metadata-Dal-Impl-NDB" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git checkout $1 "
	popd &> /dev/null 
}

hops-commit-and-push (){
	pushd . &> /dev/null 
	display_colored_msg "Hops" && \
	exe_and_display "cd ~/code/hops/hops && gcp $@"  && \

	display_colored_msg "Hops-Metadata-Dal" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal && gcp $@" && \

	display_colored_msg "Hops-Metadata-Dal-Impl-NDB" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && gcp $@" 

	popd &> /dev/null 
}

#mvnc=' grep --line-buffered --color=always "Installing\|Downloading\|\[INFO] Building\|\[ERROR].*\|\[WARN].*\| SUCCESS \[.*\| FAILURE \[.*\| SKIPPED\|\[WARNING]\|Building.*" | red-grep  "^\|\[ERROR]\|\[WARN]" | green-grep "^\|SUCCESS" | cyan-grep "^\|SKIPPED" | green-grep "^\|\[INFO]" | blue-grep "^\|Building.*" | grey-grep "^\|Installing\|Downloading"'
mvnc=' grep --line-buffered --color=always "cd ~.*\|===.*\|Downloading\|\[INFO] Building\|\[ERROR].*\|\[WARN].*\| SUCCESS \[.*\| FAILURE \[.*\| SKIPPED\|\[WARNING]\|Building.*" | red-grep  "^\|\[ERROR]\|\[WARN]" | green-grep "^\|SUCCESS" | cyan-grep "^\|SKIPPED" | green-grep "^\|\[INFO]" | blue-grep "^\|Building.*" | grey-grep "^\|Installing\|Downloading" | red-grep "^\|cd ~.*" | blue-grep "^\|===.*" '

hops-build-verbose (){
#	set -e  # strange maven kill bash when there is a build failure
	pushd . &> /dev/null && \
	start=`date +%s` && \
	display_colored_msg "Building Hops-gpu-management" && \
    exe_and_display "cd ~/code/hops/hops-gpu-management && mvn  $@ install -DskipTests " && \

	display_colored_msg "Building Hops-gpu-management-impl-nvidia" && \
    exe_and_display "cd ~/code/hops/hops-gpu-management-impl-nvidia && mvn  $@ install -DskipTests " && \

	display_colored_msg "Building Hops-gpu-management-impl-amd" && \
	exe_and_display "cd ~/code/hops/hops-gpu-management-impl-amd && mvn  $@ install -DskipTests " && \

	display_colored_msg "Building Hops-metadata-dal" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal && mvn  $@ install -DskipTests " && \

	display_colored_msg "Building Hops-metadata-dal-impl-ndb" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && mvn  $@ install -DskipTests " && \

	display_colored_msg "Building Hops" && \
	exe_and_display "cd ~/code/hops/hops && mvn  $@ install generate-sources -DskipTests " && \

	display_colored_msg "Building Hops Tests" && \
	exe_and_display "mvn test-compile " && \

	popd &> /dev/null  && \
	end=`date +%s` && \
	runtime=$((end-start)) && \
	display_colored_msg "[INFO] Building Hops Took: $runtime sec(s)"
}

hops-rebase-upstream-master(){
	pushd . &> /dev/null && \
	start=`date +%s` && \
	display_colored_msg "FETCHING HOPS-GPU-MANAGEMENT" && \
    exe_and_display "cd ~/code/hops/hops-gpu-management && git pull" && \ 

	display_colored_msg "FETCHING HOPS-GPU-MANAGEMENT-IMPL-NVIDIA" && \
    exe_and_display "cd ~/code/hops/hops-gpu-management-impl-nvidia && git pull" && \

	display_colored_msg "FETCHING HOPS-GPU-MANAGEMENT-IMPL-AMD" && \
    exe_and_display "cd ~/code/hops/hops-gpu-management-impl-amd && git pull" && \

	display_colored_msg "FETCHING HOPS-METADATA-DAL" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal && git fetch upstream && git checkout master && git rebase upstream/master && git push" && \

	display_colored_msg "FETCHING HOPS-METADATA-DAL-IMPL-NDB" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git fetch upstream && git checkout master && git rebase upstream/master && git push" && \

	display_colored_msg "FETCHING HOPS" && \
	exe_and_display "cd ~/code/hops/hops && git fetch upstream && git checkout master && git rebase upstream/master && git push" && \

	popd &> /dev/null  && \
	end=`date +%s` && \
	runtime=$((end-start)) && \
	display_colored_msg "TOTAL COMPILATION TIME IS : $runtime SEC(S)"
}

hops-rebase-master(){
	pushd . &> /dev/null && \
	start=`date +%s` && \
	display_colored_msg "Rebasing HOPS-METADATA-DAL" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal && git rebase master" && \

	display_colored_msg "Rebasing HOPS-METADATA-DAL-IMPL-NDB" && \
	exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git rebase master" && \

	display_colored_msg "Rebasing HOPS" && \
	exe_and_display "cd ~/code/hops/hops && git rebase master" && \

	popd &> /dev/null  && \
	end=`date +%s` && \
	runtime=$((end-start)) && \
	display_colored_msg "TOTAL REBASE TIME IS : $runtime SEC(S)"
}

hops-delete-branch(){
	if [ ! "$#" -eq 1 ]; then
	    echo "Please enter branch name"
	    return 1
    fi
	pushd . &> /dev/null && \
	start=`date +%s` && \
	display_colored_msg "DELETING BRANCH $1 IN HOPS-METADATA-DAL" && \
    exe_and_display "cd ~/code/hops/hops-metadata-dal && git branch -D $1 && git push --delete origin  $1" && \

	display_colored_msg "DELETING BRANCH $1 HOPS-METADATA-DAL-IMPL-NDB" && \
    exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git branch -D $1 && git push --delete origin  $1" && \

	display_colored_msg "DELETING BRANCH $1 HOPS" && \
    exe_and_display "cd ~/code/hops/hops && git branch -D $1 && git push --delete origin  $1" && \

	popd &> /dev/null  && \
	end=`date +%s` && \
	runtime=$((end-start)) && \
	display_colored_msg "TOTAL TIME IS : $runtime SEC(S)"
}

hops-create-branch(){
	if [ ! "$#" -eq 1 ]; then
	    echo "Please enter new branch name"
	    return 1
    fi
	pushd . &> /dev/null && \
	start=`date +%s` && \
	display_colored_msg "CREATING BRANCH $1 IN HOPS-METADATA-DAL" && \
    exe_and_display "cd ~/code/hops/hops-metadata-dal && git checkout -b $1 && git push origin -u $1" && \

	display_colored_msg "CREATING BRANCH $1 HOPS-METADATA-DAL-IMPL-NDB" && \
    exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git checkout -b $1 && git push origin -u $1" && \

	display_colored_msg "CREATING BRANCH $1 HOPS" && \
    exe_and_display "cd ~/code/hops/hops && git checkout -b $1 && git push origin -u $1" && \

	popd &> /dev/null  && \
	end=`date +%s` && \
	runtime=$((end-start)) && \
	display_colored_msg "TOTAL TIME IS : $runtime SEC(S)"
}

hops-status(){
	pushd . &> /dev/null && \
	display_colored_msg "HOPS-METADATA-DAL" && \
    exe_and_display "cd ~/code/hops/hops-metadata-dal && git status $@" && \

	display_colored_msg "HOPS-METADATA-DAL-IMPL-NDB" && \
    exe_and_display "cd ~/code/hops/hops-metadata-dal-impl-ndb && git status $@" && \

	display_colored_msg "HOPS" && \
    exe_and_display "cd ~/code/hops/hops && git status $@" && \

	popd &> /dev/null
}


hops-build (){
	eval "hops-build-verbose $@| $mvnc"
}


hops-build-distro (){
	pushd . &> /dev/null && \
	display_colored_msg "Building Distribution" && \
    exe_and_display "cd ~/code/hops/hops && mvn package -Pdist -DskipTests -Dtar -Dmaven.javadoc.skip=true" && \
	popd &> /dev/null
}

mi () {
 	exe_and_display "mvn $@ install -Dmaven.test.skip=true "
}

mig () {
	exe_and_display "mvn $@ install -Dmaven.test.skip=true generate-sources"
}


mtc () {
   exe_and_display "mvn test-compile "
}

s2 () {
#ssh -A -t nzo@cloud1.sics.se ssh -A -t salman@salman2.sics.se
	ssh salman@salman2.sics.se
}

ice () {
	ssh -p 8209 hdp@ice $@
}

ice-test () {
    ssh -p 8209 hdp@ice -t ssh tester@10.0.208.1
}

c1 () { 
	ssh nzo@cloud1.sics.se
}

#if [ -n "$DISPLAY" ]; then
#   Xaxis=$(xrandr --current | grep '*' | uniq | awk '{print $1}' | cut -d 'x' -f1)
#   if [ "$Xaxis" -gt "2000" ]; then
#   	   alias mupdf="mupdf -r 400"
#   fi
#fi

tmux-pane-color(){
  	tmux select-pane -t:.$1 -P "fg=$2,bg=$3"
  	if [ "$?" -ne "0" ]; then
  		echo "Usage command {pane-number} {fg-color} {bg-color} "
  	fi
}

ndb-start-vm(){
    VBoxManage startvm centos --type headless
}

ndb-stop-vm(){
    VBoxManage controlvm centos acpipowerbutton
}

ndb-ssh-vm(){
    ssh -p 2222 salman@localhost
}

ndb-mysql(){
   ssh -p 2222 -t salman@localhost "/home/salman/.mysql/ndb/scripts/mysql"
}

ndb-mycli(){
   ssh -p 2222 -t salman@localhost "/home/salman/.mysql/ndb/scripts/mycli"
}
