#!/bin/bash

help(){
log "-d <direction> select the direction.  l,r for left, and right respectively"
}

function log(){
	message=$1
	echo -e    $1
	echo -e    $1 >> /tmp/switcher/log
}

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.
direction=""
fullscreen=false
centre=false
while getopts "fcd:" opt; do
    case "$opt" in
    (f)  fullscreen=true
        ;;
    (c)  centre=true
        ;;
    (d)  direction=$OPTARG
        ;;
    (*)
        help
        exit 0
        ;;
    esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

log "Parameters received are: -d '$direction' -f $fullscreen -c $centre"

if [ "$direction" != "" ] && [ "$direction" != "l" ] &&  [ "$direction" != "r" ] ; then
	log "Only moving window to left or right is supported" 
	exit 1
fi

if  [ "$direction" != "" ] &&  ( [ $centre == true ] ||  [ $fullscreen == true ] ) ; then
    log "Choose only one option. Move window to left/right, centre or full screen" 
	exit 1
fi

if  [ "$direction" == "" ] &&  ( [ $centre == true ] &&  [ $fullscreen == true ] ) ; then
    log "Choose only one option. Move window to left/right, centre or full screen" 
	exit 1
fi

resolution=($(xdpyinfo | grep -ioh "dimensions.*[0-9x]*pixels" | grep -ioh "[0-9]*"))
resolution_width=${resolution[0]}
resolution_height=${resolution[1]}

if [ $fullscreen == true ]; then
    log "Setting window to full screen"
	xdotool getactivewindow windowmove 0 0 
	xdotool getactivewindow windowsize $resolution_width $resolution_height
    exit 0
fi

sizes=()
scales=("0.62" "0.5" "0.38")
for scale in "${scales[@]}"
do
	size_float=$(bc <<< "scale=0; $resolution_width*$scale")
	size_int=$(printf "%.0f" $size_float)
	sizes+=($size_int)
done
log "Sizes: ${sizes[*]}"

geometry=($(xdotool getwindowfocus getwindowgeometry | grep "Geometry" | grep -ioh "[0-9]*" ))
geometryx=${geometry[0]}
geometryy=${geometry[1]}
#log "Current Geometry $geometryx, $geometryy" 

i=0
while [ $i -ne ${#sizes[@]} ]
do
    if [ "${sizes[$i]}" == "$geometryx" ]; then
		i=$(($i+1))
		break	
	fi

	i=$(($i+1))
done

next_size=$(( ($i) % ${#sizes[@]} ))
#log "Next size. index: $next_size, size: ${sizes[$next_size]}"

if [ "$direction" == "l" ]; then 
	movex=0
	movey=0
	sizex=${sizes[$next_size]} 
	sizey=$resolution_height
fi

if [ "$direction" == "r" ]; then 
	movex=$(($resolution_width-${sizes[$next_size]}))
	movey=0
	sizex=${sizes[$next_size]} 
	sizey=$resolution_height
fi

if [ "$centre" == true ]; then 
	movex=$(($resolution_width-${sizes[$next_size]}))
	movex=$(($movex / 2))
	movey=0
    sizex=${sizes[$next_size]}
    sizey=$resolution_height
fi

log "Start: ($movex,$movey) Size: ($sizex x $sizey)"
xdotool getactivewindow windowsize $sizex $sizey 
xdotool getactivewindow windowmove $movex $movey 
logstr=$(xwininfo  -id $(xdotool getactivewindow) | grep "geometry")
log "$logstr"
adjustment=($(xwininfo  -id $(xdotool getactivewindow) | grep "geometry" | grep -io "[+\-][0-9]\+"))
adjustment=${adjustment[1]}
log "Adjustment $adjustment"
if [ "$adjustment" != "0" ]; then
	sizey=$((sizey-$adjustment))
	xdotool getactivewindow windowsize $sizex $sizey 
fi
