# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled the all
# possible completions will be listed.
smart_completion = True

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = False

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as "drop table", "drop database"
# or "shutdown".
destructive_warning = False

# log_file location.
log_file = ~/.mycli.log

# Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
# and "DEBUG". "NONE" disables logging.
log_level = WARNING

# Log every query and its results to a file. Enable this by uncommenting the
# line below.
# audit_log = ~/.mycli-audit.log

# Timing of sql statments and table rendering.
timing = False 

# Table format. Possible values: ascii, double, github,
# psql, plain, simple, grid, fancy_grid, pipe, orgtbl, rst, mediawiki, html,
# latex, latex_booktabs, textile, moinmoin, jira, vertical, tsv, csv.
# Recommended: ascii
table_format = fancy_grid

# Syntax coloring style. Possible values (many support the "-dark" suffix):
# manni, igor, xcode, vim, autumn, vs, rrt, native, perldoc, borland, tango, emacs,
# friendly, monokai, paraiso, colorful, murphy, bw, pastie, paraiso, trac, default,
# fruity.
# Screenshots at http://mycli.net/syntax
syntax_style = default
wider_completion_menu = False

# MySQL prompt
# \D - The full current date
# \d - Database name
# \h - Hostname of the server
# \m - Minutes of the current time
# \n - Newline
# \P - AM/PM
# \p - Port
# \R - The current time, in 24-hour military time (0–23)
# \r - The current time, standard 12-hour time (1–12)
# \s - Seconds of the current time
# \t - Product type (Percona, MySQL, MariaDB)
# \u - Username
prompt = "\u@\h:\d> "
prompt_continuation = "-> "

# Skip intro info on startup and outro info on exit
less_chatty = True

# Use alias from --login-path instead of host name in prompt
login_path_as_host = False

# Cause result sets to be displayed vertically if they are too wide for the current window,
# and using normal tabular format otherwise. (This applies to statements terminated by ; or \G.)
auto_vertical_output = False

# keyword casing preference. Possible values "lower", "upper", "auto"
keyword_casing = auto 

# disabled pager on startup
enable_pager = True

# Custom colors for the completion menu, toolbar, etc.
[colors]
completion-menu.completion.current = "bg:#ffffff #000000"
completion-menu.completion = "bg:#008888 #ffffff"
completion-menu.meta.completion.current = "bg:#44aaaa #000000"
completion-menu.meta.completion = "bg:#448888 #ffffff"
completion-menu.multi-column-meta = "bg:#aaffff #000000"
scrollbar.arrow = "bg:#003333"
scrollbar = "bg:#00aaaa"
selected = "#ffffff bg:#6666aa"
search = "#ffffff bg:#4444aa"
search.current = "#ffffff bg:#44aa44"
bottom-toolbar = "bg:#222222 #aaaaaa"
bottom-toolbar.off = "bg:#222222 #888888"
bottom-toolbar.on = "bg:#222222 #ffffff"
search-toolbar = noinherit bold
search-toolbar.text = nobold
system-toolbar = noinherit bold
arg-toolbar = noinherit bold
arg-toolbar.text = nobold
bottom-toolbar.transaction.valid = "bg:#222222 #00ff5f bold"
bottom-toolbar.transaction.failed = "bg:#222222 #ff005f bold"

# style classes for colored table output
output.header = "#008888 bold"
output.odd-row = ""
output.even-row = ""

Token.Prompt = '#0087af bold'


[favorite_queries]
i = 'select id as "id", parent_id as "PID", if(length(name)>20, concat(left(name,20),"..."), name) as "name", partition_id as "part\nID", user_id as "UID", group_id as "GID", oct(permission) as "perm\nOCT", generation_stamp as "GS", HEX(header) as "HEX\nHeader", subtree_locked as "sto\nLkd", subtree_lock_owner as "STO\nOwner", sys.format_bytes(size) as "size", quota_enabled as "qota", meta_enabled as "META\n?", if(is_dir=1,"dir", "file") as "is\ndir", if(HEX(storage_policy)="E", "DB", if(HEX(storage_policy)="3", "CLOUD", if(HEX(storage_policy)="7", "HOT",  HEX(storage_policy)))) as "HEX\nPolicy",  file_stored_in_db as "is\in\nDB?", under_construction as "is\nUC", children_num as "Num\nChild" from hdfs_inodes order by id ASC'
iargs = 'select id as "id", parent_id as "PID", if(length(name)>20, concat(left(name,20),"..."), name) as "name", partition_id as "part\nID", user_id as "UID", group_id as "GID", oct(permission) as "perm\nOCT", generation_stamp as "GS", HEX(header) as "HEX\nHeader", subtree_locked as "sto\nLkd", subtree_lock_owner as "STO\nOwner", sys.format_bytes(size) as "size", quota_enabled as "qota", meta_enabled as "META\n?", if(is_dir=1,"dir", "file") as "is\ndir", if(HEX(storage_policy)="E", "DB", if(HEX(storage_policy)="3", "CLOUD", if(HEX(storage_policy)="7", "HOT",  HEX(storage_policy)))) as "HEX\nPolicy",  file_stored_in_db as "is\in\nDB?", under_construction as "is\nUC", children_num as "Num\nChild" from hdfs_inodes $1 order by id ASC'
b = 'select inode_id as "inode\nID", block_id as "Blk\nID", block_index as "index", sys.format_bytes(num_bytes) as "size", generation_stamp as "GS", block_under_construction_state as "UC\nState", time_stamp as "TS", primary_node_index as "Pri\nIndex", block_recovery_id as "recovery\nID", truncate_block_num_bytes as "Trunc\nBytes", truncate_block_generation_stamp as "Trunc\nGS", cloud_bucket_id as "bucket\nID" from hdfs_block_infos order by inode_id ASC, block_id ASC, block_index ASC'
bargs = 'select inode_id as "inode\nID", block_id as "Blk\nID", block_index as "index", sys.format_bytes(num_bytes) as "size", generation_stamp as "GS", block_under_construction_state as "UC\nState", time_stamp as "TS", primary_node_index as "Pri\nIndex", block_recovery_id as "recovery\nID", truncate_block_num_bytes as "Trunc\nBytes", truncate_block_generation_stamp as "Trunc\nGS", cloud_bucket_id as "bucket\nID" from hdfs_block_infos $1 order by inode_id ASC, block_id ASC, block_index ASC'
all = 'select id as "id", parent_id as "PID", if(length(name)>20, concat(left(name,20),"..."), name) as "name", partition_id as "part\nID", user_id as "UID", group_id as "GID", oct(permission) as "perm\nOCT", generation_stamp as "GS", HEX(header) as "HEX\nHeader", subtree_locked as "sto\nLkd", subtree_lock_owner as "STO\nOwner", sys.format_bytes(size) as "size", quota_enabled as "qota", meta_enabled as "META\n?", if(is_dir=1,"dir", "file") as "is\ndir", if(HEX(storage_policy)="E", "DB", if(HEX(storage_policy)="3", "CLOUD", if(HEX(storage_policy)="7", "HOT",  HEX(storage_policy)))) as "HEX\nPolicy",  file_stored_in_db as "is\in\nDB?", under_construction as "is\nUC", children_num as "Num\nChild" from hdfs_inodes order by id ASC; select inode_id as "inode\nID", block_id as "Blk\nID", block_index as "index", sys.format_bytes(num_bytes) as "size", generation_stamp as "GS", block_under_construction_state as "UC\nState", time_stamp as "TS", primary_node_index as "Pri\nIndex", block_recovery_id as "recovery\nID", truncate_block_num_bytes as "Trunc\nBytes", truncate_block_generation_stamp as "Trunc\nGS", cloud_bucket_id as "bucket\nID" from hdfs_block_infos order by inode_id ASC, block_id ASC, block_index ASC;  select * from hdfs_replicas order by inode_id ASC, block_id ASC; select * from hdfs_replica_under_constructions order by inode_id ASC, block_id ASC'
allsf = 'select inode_id, sys.format_bytes(char_length(data)) as "length" from hdfs_inmemory_file_inode_data order by inode_id ASC; select inode_id, sys.format_bytes(char_length(data)) as "length" from hdfs_ondisk_small_file_inode_data order by inode_id ASC; select inode_id, sys.format_bytes(char_length(data)) as "length" from hdfs_ondisk_medium_file_inode_data order by inode_id ASC; select inode_id, sys.format_bytes(char_length(data)) as "length" from hdfs_ondisk_large_file_inode_data order by inode_id ASC'
allr = "select * from hdfs_replica_under_constructions order by inode_id ASC, block_id ASC; select * from hdfs_under_replicated_blocks order by inode_id ASC, block_id ASC; select * from hdfs_pending_blocks order by inode_id ASC, block_id ASC; select * from hdfs_excess_replicas order by inode_id ASC, block_id ASC; select * from hdfs_corrupt_replicas order by inode_id ASC, block_id ASC; select * from hdfs_invalidated_blocks order by inode_id ASC, block_id ASC"
r = "select * from hdfs_replicas order by inode_id ASC, block_id ASC"
s = "select * from hdfs_storage_id_map,hdfs_storages where hdfs_storage_id_map.sid = hdfs_storages.storage_id order by sid"

# Use the -d option to reference a DSN.
[alias_dsn]
# example_dsn = mysql://[user[:password]@][host][:port][/dbname]
test = mysql://hop:hop@localhost/hop_salman

